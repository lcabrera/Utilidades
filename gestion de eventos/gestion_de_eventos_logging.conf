# Chequeo de comentarios

[loggers]
# En  primer  lugar, se  exponen  varios  métodos  para el  código  de
# aplicación para que las aplicaciones pueden registrar los mensajes en
# tiempo de  ejecución. En  segundo lugar,  los objetos  registrador de
# determinar qué mensajes de registro para actuar en base a la gravedad
# (la instalación predeterminada de filtrado)  o los objetos de filtro.
# En  tercer lugar,  los  objetos pasan  a lo  largo  de registrador  de
# mensajes  de registro  correspondientes a  todos los  controladores de
# registro de interesados.
#
# First,  they  expose  several  methods to  application  code  so  that
# applications  can  log messages  at  runtime.  Second, logger  objects
# determine  which log  messages to  act upon  based upon  severity (the
# default filtering  facility) or filter objects.  Third, logger objects
# pass along relevant log messages to all interested log handlers.
keys=root, simpleExample

[handlers]
#  Logger puede agregar cero o más  objetos de controlador a sí mismos
# con  un  addHandler  ()  método.  En un  escenario  de  ejemplo,  una
# aplicación puede enviar  todos los mensajes de registro  a un archivo
# de registro, todos  los mensajes de registro de error  o superior a la
# salida estándar, y todos los mensajes de crítica a una dirección de
# correo  electrónico. Este  escenario requiere  de tres  controladores
# individuales donde cada controlador  es responsable de enviar mensajes
# de una gravedad específica de un lugar específico.
#
# Logger objects can add zero or more handler objects to themselves with
# an addHandler()  method. As  an example  scenario, an  application may
# want to send all log messages to a log file, all log messages of error
# or higher to stdout, and all messages of critical to an email address.
# This scenario requires three individual handlers where each handler is
# responsible for sending messages of  a specific severity to a specific
# location.
keys=consoleHandler

[formatters]
# objetos formateador configurar el orden final, estructura y contenido
# del mensaje de registro. A diferencia de la clase logging.Handler
# base, código de la aplicación puede crear una instancia del
# formateador clases, aunque es probable que podía derivar el
# formateador si su aplicación necesita un comportamiento especial.
#
# Formatter objects configure the final order, structure, and contents
# of the log message. Unlike the base logging.Handler class, application
# code may instantiate formatter classes, although you could likely
# subclass the formatter if your application needs special behavior.
keys=simpleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_simpleExample]
level=DEBUG
handlers=consoleHandler
qualname=simpleExample
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=
#datefmt='%a, %d %b %Y %H:%M:%S'
